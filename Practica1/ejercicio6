Realice una solución concurrente de grano grueso (utilizando <> y/o <await B; S>) para el
siguiente problema. En un examen final hay P alumnos y 3 profesores. Cuando todos los
alumnos han llegado comienza el examen. Cada alumno resuelve su examen, lo entrega y
espera a que alguno de los profesores lo corrija y le indique la nota. Los profesores corrigen
los exámenes respetando el orden en que los alumnos van entregando

int alumnosPresentes = 0;
vector entregaAlumnos[P] = -1;//todas las posiciones del vector inician en -1
boolean empezar = false;
cola c;

Process Alumno[id: 1..P]{
	<alumnosPresentes = alumnosPresentes + 1;>
	<await(empezar == true)>
	//resuelve el examen
	<Agregar(c, id);>
	<await(entregaAlumnos[idAlumno - 1] != -1)>//Retorna -1 si id se encuentra en el vector 
	//el alumno se va
}

process Profesor[id: 1..3]{
	<await (alumnosPresentes == P)>
	empezar = true;
	for i=0 to P {
		<await(!Empty(c)); idAlumno=Sacar(c)>
		nota = examenCorregido();//corrige el examen y devuelve la nota
		entregaAlumnos[idAlumno-1] = nota;
		
	}
	//el profesor termina de corregir todos los examenes
}
