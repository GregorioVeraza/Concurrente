Simular la atención en un locutorio con 10 cabinas telefónicas, el cual tiene un empleado
que se encarga de atender a N clientes. Al llegar, cada cliente espera hasta que el empleado
le indique a qué cabina ir, la usa y luego se dirige al empleado para pagarle. El empleado
atiende a los clientes en el orden en que hacen los pedidos, pero siempre dando prioridad a
los que terminaron de usar la cabina. A cada cliente se le entrega un ticket factura. 
Nota: maximizar la concurrencia;
 suponga que hay una función Cobrar() llamada por el empleado
que simula que el empleado le cobra al cliente.

Process Cabina[id: 0..9]{
    receive usarCabina[id](idC);
    send terminoCabina[idC]();
}

Process Empleado{
    int cabinas = 10;
    int numCabina;
    boolean cabinaDisponible[10] = ([10] true)
    if (empty(terminoCabina)){
        if (cabinas > 0){
            receive llegue(idC);
            numCabina = Disponible(cabinaDisponible);
            cabinaDisponible[numCabina] = false;
            send obtenerNumeroCabina[idC](numCabina);
            cabinas--;
        }
    } else {
        texto ticket;
        receive irAPagar(idC, numCabina);
        ticket = Cobrar();
        send obtenerTicket[idC](ticket);
        cabinaDisponible[numCabina] = true;
        cabinaNum++;
    }
}

Process Cliente[id: 0..N-1]{
    int numeroCabina;
    texto ticket;

    send llegue(id);
    receive obtenerNumeroCabina[id](numeroCabina);
    send usarCabina[numeroCabina](id);
    receive terminoCabina[id]();
    send irAPagar(id, numeroCabina);
    receive obtenerTicket[id](ticket);
}
