Se desea modelar el funcionamiento de un banco en el cual existen 5 cajas para realizar
pagos. Existen P clientes que desean hacer un pago. Para esto, cada una selecciona la caja
donde hay menos personas esperando; una vez seleccionada, espera a ser atendido. En cada
caja, los clientes son atendidos por orden de llegada por los cajeros. Luego del pago, se les
entrega un comprobante. Nota: maximizando la concurrencia.

chan preguntarFila(int);
chan obtenerFila[P](int);
chan sacarFila(int);
chan atendeme[5](int);
chan obtenerComprobante[P](text);
Process Coordinador{
    int cantEnFila[5] = ([5] 0);
    int id;
    int fila;
    while (true){
        if (not empty(sacarFila)){
            recieve sacarFila(fila);
            cantEnFila[fila]--;
        } else{
            recieve preguntarFila(id);
            int fila = min(cantEnFila);//devuelve las posicion del valor minimo del vector
            cantEnFila[fila]++;
            send obtenerFila[id](fila);
        }
    }
}

Process Cajas[id: 0..4]{
    int idCliente;
    text comprobante;
    while (true){
        recieve atendeme[id](idCliente);
        comprobante = realizarComprobante();//devuelve el comprobante
        send obtenerComprobante[idCliente](comprobante);
        send sacarFila(id);
    }
}

Process Cliente[id: 0..P-1]{
    int numFila;
    text comprobante;
    send preguntarFila(id);
    recieve obtenerFila[id](numFila);
    send atendeme[numFila](id);
    recieve obtenerComprobante[id](comprobante);
}
